// ゲート説明データの外部化
// PropertyPanel.tsxから抽出して保守性を向上

export interface GateDescription {
  title: string;
  icon: string;
  basicOperation: string;
  truthTableNote?: string;
  realWorldAnalogy: string[];
  whyImportant: string;
  technicalInsight?: string;
  learningTip: string;
}

export const gateDescriptions: Record<string, GateDescription> = {
  AND: {
    title: 'ANDゲート（論理積）',
    icon: '🔗',
    basicOperation:
      'すべての入力が1（ON）の時のみ出力が1（ON）になります。一つでも0（OFF）があると出力は0になります。',
    truthTableNote:
      '真理値表では、最後の行（1,1→1）だけが出力1になることに注目してください。',
    realWorldAnalogy: [
      '車の発進システムのような判断：「シートベルト装着 かつ ドア閉鎖」の両方が満たされた時のみ発進可能',
      'セキュリティシステムのような考え方：「IDカード認証 かつ 指紋認証」の両方が成功した時のみアクセス許可',
      'レストランの営業判定のような論理：「食材の準備完了 かつ スタッフの出勤完了」の両方で営業開始',
    ],
    whyImportant:
      'ANDゲートは「厳格な条件判定」の基礎です。複数の条件をすべて満たす場合にのみ動作させるという考え方は、安全性や品質管理において不可欠な概念です。',
    technicalInsight:
      'デジタル回路では、複数の信号が同時に「有効」である状況を検出する基本素子として機能します。論理演算の基礎であり、より複雑な判定回路の構成要素となります。',
    learningTip:
      'このツールでINPUTゲートを2つ配置し、ANDゲートに接続してみてください。両方のINPUTを色々な組み合わせでON/OFFして、「両方ONの時だけ」という動作を体感してみましょう。',
  },

  OR: {
    title: 'ORゲート（論理和）',
    icon: '🌈',
    basicOperation:
      '少なくとも一つの入力が1（ON）であれば出力が1（ON）になります。すべてが0（OFF）の時のみ出力が0になります。',
    truthTableNote:
      '真理値表では、最初の行（0,0→0）以外はすべて出力1になることが特徴的です。',
    realWorldAnalogy: [
      '緊急停止システムのような判断：「手動停止ボタン または 異常センサー検知」のどちらか一つでも作動すると停止',
      'ログイン認証のような考え方：「パスワード認証 または 生体認証」のどちらか一つでも成功すればアクセス可能',
      '警報システムのような論理：「煙の検知 または 高温の検知」のどちらか一つでも反応すれば警報発動',
    ],
    whyImportant:
      'ORゲートは「選択肢と冗長性」を表現します。複数の手段や経路がある場合に、どれか一つでも利用可能であれば目的を達成できるという柔軟な思考の基礎となります。',
    technicalInsight:
      'マルチパス設計や冗長システムの基本概念です。システムの可用性と信頼性を高めるために、複数の入力のうち少なくとも一つが有効であれば動作を継続する仕組みを作ります。',
    learningTip:
      'ANDゲートと比較してみてください。同じ入力でも「すべて必要」と「どれか一つでも」で結果がどう変わるか実験してみましょう。',
  },

  NOT: {
    title: 'NOTゲート（論理否定）',
    icon: '🔄',
    basicOperation:
      '入力が1（ON）なら出力は0（OFF）、入力が0（OFF）なら出力は1（ON）になります。完全に逆転させます。',
    truthTableNote:
      '真理値表は2行だけのシンプルな構造で、入力と出力が必ず逆になります。',
    realWorldAnalogy: [
      '照明スイッチのような動作：「現在OFFなら点灯、現在ONなら消灯」という逆転操作',
      'エレベーターのような判断：「扉が開いていない」時のみ動作という否定的条件',
      '在庫管理のような考え方：「商品が不足していない」= 「商品が十分にある」という論理',
    ],
    whyImportant:
      'NOTゲートは「逆転思考」と「否定条件」を扱う基本です。「〜でない場合」や「〜の逆」という概念は、安全設計や条件分岐において極めて重要です。',
    technicalInsight:
      '唯一の単入力ゲートで、他のすべてのゲートと組み合わせることで様々な論理を構築できます。補数信号の生成や論理の反転に不可欠です。',
    learningTip:
      'INPUTゲートをダブルクリックして状態を切り替えながら、NOTゲートの出力が必ず逆になることを確認してください。シンプルですが非常に重要な動作です。',
  },

  XOR: {
    title: 'XORゲート（排他的論理和）',
    icon: '✨',
    basicOperation:
      '「どちらか片方だけ」が1（ON）の時に出力が1（ON）。同じ値（00または11）の時は出力が0（OFF）になります。',
    truthTableNote:
      '「違い」を検出する魔法の動作です。入力が異なる時のみ1を出力します。',
    realWorldAnalogy: [
      '秘密の扉のような判断：「鍵A または 鍵B のどちらか片方だけ」で開く特殊な錠前',
      '警備システムのような考え方：「センサー1とセンサー2の状態が違う」時に異常信号',
      'バランス検知のような論理：「左右の重さが違う」時にアラームという天秤システム',
    ],
    whyImportant:
      'XORゲートは「違いの検出」と「排他性」を表現します。暗号化、誤り検出、比較処理など、情報の「差分」を扱うあらゆる分野で不可欠です。',
    technicalInsight:
      '暗号化技術の基礎要素として革命的な役割を果たします。A⊕A=0、A⊕0=Aという自己消去性により、可逆計算や量子コンピュータの基本演算となっています。',
    learningTip:
      '同じ値を入力した時（00や11）と違う値を入力した時（01や10）で出力がどう変わるか実験してみてください。「違い検知器」としての面白さが分かります。',
  },

  NAND: {
    title: 'NANDゲート（否定論理積）',
    icon: '⚡',
    basicOperation:
      'ANDゲートの出力を反転したもの。すべての入力が1（ON）の時のみ出力が0（OFF）になり、それ以外は1（ON）です。',
    truthTableNote:
      'ANDの真逆で、「全部揃った時だけNO」という特殊な判定をします。',
    realWorldAnalogy: [
      '安全装置のような判断：「全ての条件が危険状態」の時のみ緊急停止という保護システム',
      '品質管理のような考え方：「全部が完璧」でない限り合格という柔軟な基準',
      'チーム判定のような論理：「全員が反対」でない限り企画続行という民主的決定',
    ],
    whyImportant:
      'NANDゲートは「万能ゲート」として、すべての論理演算を単独で実現できます。製造コストと設計の単純化において革命的な意味を持ちます。',
    technicalInsight:
      '論理的完全性を持つため、NANDだけで任意の論理回路を構築可能。TTL技術の基盤となり、初期のコンピュータ設計を支えた歴史的に重要なゲートです。',
    learningTip:
      'ANDゲートと比較して、出力が完全に逆になることを確認してください。「万能性」を体感するため、NANDだけでNOTやORを作る実験も面白いです。',
  },

  NOR: {
    title: 'NORゲート（否定論理和）',
    icon: '🌟',
    basicOperation:
      'ORゲートの出力を反転したもの。すべての入力が0（OFF）の時のみ出力が1（ON）になり、一つでも1があると出力は0（OFF）です。',
    truthTableNote:
      '「何もない状態」でのみ動作する、清浄性を重視した判定です。',
    realWorldAnalogy: [
      'クリーンルームのような判断：「一切の汚染がない」時のみ作業開始という厳格な環境管理',
      '静寂センサーのような考え方：「すべての音源が静か」な時のみ録音開始という音響システム',
      '完全リセットのような論理：「全ての警告が消えた」時のみ正常運転という安全確認',
    ],
    whyImportant:
      'NORゲートは「清浄状態の検出」と「フェイルセーフ設計」の基礎です。NANDと同じ万能性を持ちながら、異なる製造プロセスで有利な特性を示します。',
    technicalInsight:
      'CMOS技術では、NORゲートの方が効率的な場合があります。ECL回路の基本要素として高速デジタル通信で活躍し、設計者に選択肢を提供します。',
    learningTip:
      'ORゲートとの違いを確認し、「すべてがクリア」という条件でのみ動作する特殊性を体感してください。安全システムの基本思想が理解できます。',
  },

  INPUT: {
    title: 'INPUTゲート（入力制御）',
    icon: '🎮',
    basicOperation:
      'ダブルクリックでON（1）/OFF（0）を切り替え。シングルクリックでは選択のみ。この直感的な操作で回路に生命を吹き込みます。',
    truthTableNote:
      '外部からの信号を回路内に取り込む最初の関門として機能します。',
    realWorldAnalogy: [
      'コンサートホールのような入口：「観客（信号）が入場」することで会場（回路）に活気をもたらす',
      'レストランの注文のような役割：「お客様のリクエスト」を厨房（回路）に伝える窓口',
      '図書館の受付のような機能：「利用者の要求」を館内システムに入力する最初の接点',
    ],
    whyImportant:
      'INPUTゲートは「外界とデジタル世界の架け橋」です。どんなに優秀な回路も、適切な入力なしには何も始まりません。すべての情報処理の出発点となります。',
    technicalInsight:
      '現実のシステムでは、アナログ信号をデジタル信号に変換するADコンバータや、外部機器からの信号を受け取るGPIOピンとして実装されます。',
    learningTip:
      'このツールでは最も基本的な操作です。ダブルクリックで状態を変更し、他のゲートへの影響を観察することで、信号の流れを理解しましょう。',
  },

  OUTPUT: {
    title: 'OUTPUTゲート（出力表示）',
    icon: '💡',
    basicOperation:
      '接続された信号の状態を💡ライトで視覚化。ON（1）の時は明るく光り、OFF（0）の時は暗くなります。',
    truthTableNote:
      '回路の「答え」を人間が理解できる形で表示する重要な役割を担います。',
    realWorldAnalogy: [
      '劇場の照明のような表現：「舞台（回路）の状況」を観客（ユーザー）に美しく伝える',
      '病院のモニターのような機能：「患者（信号）の状態」を医師（エンジニア）に正確に表示',
      '天気予報の表示のような役割：「大気（回路内部）の状況」を市民（利用者）に分かりやすく提示',
    ],
    whyImportant:
      'OUTPUTゲートは「デジタル思考の可視化」を実現します。内部処理がどれほど複雑でも、結果を理解可能な形で提示することがユーザビリティの核心です。',
    technicalInsight:
      '実際のシステムでは、LED、ディスプレイ、スピーカー、モーターなど様々な出力デバイスとして実装され、人間とシステムの対話を可能にします。',
    learningTip:
      '回路の「答え合わせ」ができる場所です。期待した結果が出ているか確認し、回路設計の正しさを検証してください。',
  },

  CLOCK: {
    title: 'CLOCKゲート（クロック信号）',
    icon: '⏰',
    basicOperation:
      '一定の間隔で0→1→0を繰り返す周期的な信号を生成。この「鼓動」がデジタル回路に時間の概念をもたらします。',
    truthTableNote:
      '時間軸に沿った周期的な変化で、固定的な入出力関係を持ちません。',
    realWorldAnalogy: [
      'オーケストラの指揮者のような役割：「全楽器（回路）」を同じリズムで演奏させる統率者',
      '工場のベルトコンベアのような機能：「すべての工程（処理）」を一定のタイミングで進める制御装置',
      '学校のチャイムのような存在：「全クラス（システム）」の時間割を同期させる基準信号',
    ],
    whyImportant:
      'CLOCKゲートは「デジタル世界の心臓」として、すべての同期動作を司ります。これなしには複雑なシステムの協調動作は不可能です。',
    technicalInsight:
      '現代のコンピュータでは数GHzの超高速で動作し、プロセッサの性能指標の基準となります。クロックドメインの設計は、大規模システム設計の最重要課題です。',
    learningTip:
      '右パネルで周波数を変更して、タイミングの重要性を体感してください。フリップフロップと組み合わせると、同期動作の神秘を体験できます。',
  },

  'D-FF': {
    title: 'D型フリップフロップ（D-FF）',
    icon: '💾',
    basicOperation:
      'クロック信号の立ち上がりエッジ（0→1の瞬間）で、D入力の値をQ出力に「記憶」します。クロックがない間は前の値を保持し続けます。',
    truthTableNote:
      'タイミング依存の動作で、クロックエッジでのみ状態が更新される特殊な性質を持ちます。',
    realWorldAnalogy: [
      '写真のシャッターのような機能：「決定的瞬間（クロックエッジ）」でその時の状況（D入力）を永続保存',
      '銀行の金庫のような仕組み：「特定の時刻（クロック）」にのみ開いて新しい内容（D値）を格納',
      '日記の記録のような動作：「毎日決まった時間（クロック）」にその日の出来事（D入力）を書き留める',
    ],
    whyImportant:
      'D-FFは「デジタル記憶の基本単位」として、現代コンピュータのメモリとレジスタの根幹を支えます。情報の一時保存と同期処理に不可欠です。',
    technicalInsight:
      'CPUレジスタ、SRAM、パイプライン制御の基礎要素です。セットアップ/ホールドタイムの概念は、高速デジタル設計の重要な制約となります。',
    learningTip:
      'CLOCKゲートと組み合わせて、「値を記憶する瞬間」を観察してください。クロックが止まっても値が保持される「記憶」の概念を体感できます。',
  },

  'SR-LATCH': {
    title: 'SRラッチ（Set-Reset Latch）',
    icon: '🔐',
    basicOperation:
      'S（Set）を1にすると出力Qが1になり記憶、R（Reset）を1にすると出力Qが0になりリセット、S=0,R=0では前の状態を保持します。',
    truthTableNote:
      'S=1,R=1は禁止状態として、予測不能な動作を示す特殊な性質があります。',
    realWorldAnalogy: [
      '電源スイッチのような動作：「ONボタン（Set）」で点灯、「OFFボタン（Reset）」で消灯、どちらも押さなければ現状維持',
      '警報システムのような機能：「異常検知（Set）」で警報開始、「手動リセット（Reset）」で警報停止という一度発動型',
      '会議室の使用状況のような管理：「使用開始（Set）」で占有、「使用終了（Reset）」で解放という状態管理',
    ],
    whyImportant:
      'SRラッチは「最初のメモリ素子」として、デジタル記憶の歴史を切り開きました。非同期動作と状態保持の基本概念を体現しています。',
    technicalInsight:
      '1918年のエクルス・ジョーダン回路に起源を持つ100年以上の歴史があります。現代でもデバウンス回路や電源管理回路の重要な構成要素です。',
    learningTip:
      'SetとResetの操作で状態がどう変わるか実験してください。「記憶するタイミング」を自由に制御できる面白さと、禁止状態の危険性を体感しましょう。',
  },

  MUX: {
    title: 'マルチプレクサ（MUX）',
    icon: '🎛️',
    basicOperation:
      'セレクト信号S（選択信号）の値に応じて、S=0の時はA入力を、S=1の時はB入力を出力Yに接続します。デジタル切り替えスイッチです。',
    truthTableNote:
      '選択信号によって「どの入力を通すか」が決まる、条件分岐を物理的に実現した回路です。',
    realWorldAnalogy: [
      '鉄道の分岐器のような機能：「進路選択（セレクト信号）」に応じて列車（データ）を適切な線路（出力）に導く',
      'テレビのチャンネル切り替えのような操作：「チャンネルボタン（セレクト）」で複数の放送（入力）から一つを選択',
      'エレベーターの階選択のような仕組み：「押したボタン（セレクト）」に応じて適切な階（出力）に移動',
    ],
    whyImportant:
      'MUXは「選択と効率性」を実現します。限られた配線で複数の信号を扱い、条件に応じた分岐処理をハードウェアレベルで実現する重要な要素です。',
    technicalInsight:
      'CPU内のALU、メモリアクセス、データパス制御の基礎となります。時分割多重化通信や、プログラムのif-else文のハードウェア実装としても活躍します。',
    learningTip:
      'セレクト信号を変更しながら、どの入力が出力に現れるか観察してください。「選択」という概念をハードウェアで体験できる面白い回路です。',
  },
};

// デフォルトの説明を取得する関数
export function getGateDescription(gateType: string): GateDescription {
  return (
    gateDescriptions[gateType] || {
      title: `${gateType}ゲート`,
      icon: '⚙️',
      basicOperation:
        'このゲートの詳細説明は準備中です。基本的な論理演算や特殊機能を提供します。',
      truthTableNote: '詳細な解説は今後のアップデートで追加予定です。',
      realWorldAnalogy: ['詳細な解説は今後のアップデートで追加予定です。'],
      whyImportant: 'デジタル回路の重要な構成要素として機能します。',
      technicalInsight: '技術的な詳細は準備中です。',
      learningTip:
        '基本的な動作を確認し、他のゲートとの組み合わせを試してみてください。',
    }
  );
}
