/**
 * CLOCKÈÅ∏ÊäûÊ©üËÉΩ„ÅÆSliceÔºà„Çø„Ç§„Éü„É≥„Ç∞„ÉÅ„É£„Éº„ÉàÁî®Ôºâ
 */

import type { StateCreator } from 'zustand';
import type { CircuitStore } from '../types';

export interface ClockSelectionSlice {
  // üéØ CLOCKÈÅ∏ÊäûÊìç‰Ωú
  setSelectedClockGate: (gateId: string | null) => void;
  autoSelectClockGate: () => void;
  clearClockSelection: () => void;
}

export const createClockSelectionSlice: StateCreator<
  CircuitStore,
  [],
  [],
  ClockSelectionSlice
> = (set, get) => ({
  // CLOCKÈÅ∏ÊäûÁä∂ÊÖã„ÇíË®≠ÂÆö
  setSelectedClockGate: (gateId: string | null) => {
    console.log(`[ClockSelection] Setting selected CLOCK: ${gateId}`);
    
    set(state => ({
      selectedClockGateId: gateId
    }));
    
    // ÈÅ∏ÊäûÂ§âÊõ¥ÊôÇ„Å´„Çø„Ç§„Éü„É≥„Ç∞„ÉÅ„É£„Éº„Éà„ÇíÊõ¥Êñ∞
    if (gateId) {
      const state = get();
      if (state.timingChartActions && state.timingChart.isVisible) {
        // Êó¢Â≠ò„ÅÆ„Éà„É¨„Éº„Çπ„Çí„ÇØ„É™„Ç¢
        state.timingChartActions.clearAllTraces();
        
        // ÈÅ∏Êäû„Åï„Çå„ÅüCLOCK„ÅÆ„Éà„É¨„Éº„Çπ„Çí‰ΩúÊàê
        const selectedGate = state.gates.find(gate => gate.id === gateId);
        if (selectedGate && selectedGate.type === 'CLOCK') {
          state.timingChartActions.addTraceFromGate(selectedGate, 'output', 0);
          console.log(`[ClockSelection] Created trace for selected CLOCK: ${gateId}`);
        }
      }
    }
  },

  // ÊúÄÂàù„ÅÆCLOCK„Ç≤„Éº„Éà„ÇíËá™ÂãïÈÅ∏Êäû
  autoSelectClockGate: () => {
    const state = get();
    const clockGates = state.gates.filter(gate => gate.type === 'CLOCK');
    
    if (clockGates.length > 0 && !state.selectedClockGateId) {
      const firstClock = clockGates[0];
      console.log(`[ClockSelection] Auto-selecting first CLOCK: ${firstClock.id}`);
      get().setSelectedClockGate(firstClock.id);
    }
  },

  // CLOCKÈÅ∏Êäû„Çí„ÇØ„É™„Ç¢
  clearClockSelection: () => {
    console.log(`[ClockSelection] Clearing CLOCK selection`);
    set(state => ({
      selectedClockGateId: null
    }));
    
    // „Çø„Ç§„Éü„É≥„Ç∞„ÉÅ„É£„Éº„Éà„ÇÇ„ÇØ„É™„Ç¢
    const state = get();
    if (state.timingChartActions) {
      state.timingChartActions.clearAllTraces();
    }
  }
});