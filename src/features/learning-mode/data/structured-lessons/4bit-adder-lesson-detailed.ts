import type { StructuredLesson } from '../../../../types/lesson-content';

export const fourBitAdderStructuredLesson: StructuredLesson = {
  id: '4bit-adder',
  title: '4ビット加算器 - 大きな数の計算ができる回路',
  description: '全加算器を4つつなげて、15を超える計算もできる実用的な回路',
  objective: '全加算器を4つつなげて、より大きな数の計算ができる回路を作り、複数の桁の計算の仕組みを理解する',
  difficulty: 'intermediate',
  prerequisites: ['full-adder'],
  estimatedMinutes: 25,
  availableGates: ['INPUT', 'OUTPUT', 'CUSTOM'],
  steps: [
    {
      id: 'intro',
      instruction: '15を超える計算をしたい！',
      content: [
        {
          type: 'heading',
          text: '【導入】なぜ4ビットだけでは足りないのか？',
        },
        {
          type: 'rich-text',
          elements: [
            '【話し方のコツ】まず学習者に質問を投げかけて興味を引く',
            '「皆さん、ゲームで高得点を取ったことはありますか？」',
            '「例えば、現在12点で、ボーナスで8点もらえたとします。合計は何点になりますか？」',
            '→ 答え：20点',
            '',
            '【ここで問題提起】',
            'ところが、コンピュータの世界では問題があります。',
            '前回まで学んだ4ビット（0000〜1111）では、',
            { text: '0から15までの数', bold: true },
            'しか表すことができませんでした。',
            '',
            '【具体的な問題を示す】',
            '12 + 8 = 20 ですが、20は4ビットでは表現できません！',
            '15が最大だからです。',
          ],
        },
        {
          type: 'heading',
          text: '【問題の具体化】身近な場面で考えてみよう',
        },
        {
          type: 'rich-text',
          elements: [
            '【教育のポイント】抽象的な話ではなく、具体例で理解を促す',
            '',
            '困る場面の例：',
            '• ゲームのスコア：12点 + 8点 = 20点（15を超える！）',
            '• お買い物：9円 + 7円 = 16円（15を超える！）',
            '• テストの点数：14点 + 6点 = 20点（15を超える！）',
            '',
            '【学習者への問いかけ】',
            '「どうすれば、この問題を解決できると思いますか？」',
            '→ 少し考える時間を与える',
            '→ 「桁を増やす」という答えを引き出す',
          ],
        },
        {
          type: 'heading',
          text: '【解決策の提示】',
        },
        {
          type: 'rich-text',
          elements: [
            '【話し方】期待感を持たせるように話す',
            '「そうです！答えは桁を増やすことです。」',
            '',
            '今回の解決方法：',
            '前回作った全加算器を',
            { text: '4つつなげて', emphasis: true },
            '、5ビット（最大31まで）で結果を表現できる回路を作ります。',
            '',
            '【成果の予告】',
            'これが完成すると：',
            '• 0〜15の数同士を足し算できる',
            '• 結果が15を超えても正しく計算できる',
            '• 最大31まで表現可能',
            '',
            '【動機付け】',
            '「これで皆さんも、スマートフォンの電卓と同じ原理の回路を作ることになります！」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】学習者が混乱していないか確認。4ビットの復習が必要そうなら、0000〜1111が0〜15に対応することを再確認する。',
        },
      ],
    },
    {
      id: 'principle',
      instruction: '複数の桁の計算を理解しよう',
      content: [
        {
          type: 'heading',
          text: '【復習】普段の筆算から思い出そう',
        },
        {
          type: 'rich-text',
          elements: [
            '【教育戦略】既知の知識（10進数の筆算）から未知の知識（2進数の筆算）へ',
            '',
            '【導入の質問】',
            '「小学校で習った筆算を思い出してください。17 + 25はどう計算しますか？」',
            '→ 学習者に筆算の手順を思い出させる',
            '',
            '【段階的説明】一緒に計算してみましょう：',
          ],
        },
        {
          type: 'table',
          headers: ['手順', '10の位', '1の位', '説明'],
          rows: [
            ['① 数を書く', '1', '7', '17を桁ごとに分ける'],
            ['', '2', '5', '25を桁ごとに分ける'],
            ['② 1の位を計算', '', '7+5=12', '1の位同士を足す'],
            ['③ 結果を分ける', '', '2', '12の1の位は2'],
            ['④ 繰り上がり', '1', '', '12の10の位（1）を繰り上げ'],
            ['⑤ 10の位を計算', '1+2+1=4', '', '元の数＋繰り上がり'],
            ['⑥ 最終結果', '4', '2', '答え：42'],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【重要ポイントの強調】',
            '筆算の鍵は',
            { text: '繰り上がり', bold: true },
            'です。',
            '1の位で12になったとき、1の位には2を書き、1を10の位に送りました。',
            '',
            '【確認質問】',
            '「なぜ10の位に1を送るのでしょうか？」',
            '→ 答え：12 = 10 + 2 だから',
          ],
        },
        {
          type: 'heading',
          text: '【発展】2進数でも同じ仕組み',
        },
        {
          type: 'rich-text',
          elements: [
            '【つながりを示す】',
            '「実は、2進数でも筆算の仕組みは全く同じなんです。」',
            '「ただし、10進数では10になったら繰り上がりますが、2進数では2になったら繰り上がります。」',
            '',
            '【具体例で説明】7 + 9 = 16の場合：',
          ],
        },
        {
          type: 'table',
          headers: ['', '8の位', '4の位', '2の位', '1の位'],
          rows: [
            ['7', '0', '1', '1', '1'],
            ['+ 9', '1', '0', '0', '1'],
            ['繰り上がり', '←', '←', '←', '1+1=2→繰り上がり'],
            ['結果', '1', '0', '0', '0'],
            ['5ビット目', '1', '', '', ''],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【段階的説明】',
            '① 1の位：1 + 1 = 2 → 0を書いて、1を繰り上げ',
            '② 2の位：1 + 0 + 1（繰り上がり）= 2 → 0を書いて、1を繰り上げ',
            '③ 4の位：1 + 0 + 1（繰り上がり）= 2 → 0を書いて、1を繰り上げ',
            '④ 8の位：0 + 1 + 1（繰り上がり）= 2 → 0を書いて、1を繰り上げ',
            '⑤ 5ビット目：1（最終的な繰り上がり）',
            '',
            '結果：10000（2進数）= 16（10進数）',
            '',
            '【理解度確認】',
            '「ここまでで、2進数の筆算について質問はありますか？」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】学習者が2進数の筆算で混乱していたら、もう一度10進数の例に戻る。特に「なぜ2で繰り上がるのか」を重点的に説明する。',
        },
      ],
    },
    {
      id: 'circuit-build',
      instruction: '4つの全加算器をつなげる回路を作ろう',
      content: [
        {
          type: 'heading',
          text: '【設計思想】筆算を回路で再現する',
        },
        {
          type: 'rich-text',
          elements: [
            '【コンセプトの説明】',
            '「さて、今学んだ筆算をコンピュータの回路で再現してみましょう。」',
            '「各桁の計算を、前回作った全加算器に担当させます。」',
            '',
            '【役割分担の明確化】',
            '全加算器を4つ用意して、それぞれに桁を担当させます：',
          ],
        },
        {
          type: 'table',
          headers: ['担当する桁', '桁の重み', '担当する全加算器', '計算内容'],
          rows: [
            ['1の位', '×1', '全加算器0', 'A0 + B0 + 0（繰り上がりなし）'],
            ['2の位', '×2', '全加算器1', 'A1 + B1 + C0（全加算器0からの繰り上がり）'],
            ['4の位', '×4', '全加算器2', 'A2 + B2 + C1（全加算器1からの繰り上がり）'],
            ['8の位', '×8', '全加算器3', 'A3 + B3 + C2（全加算器2からの繰り上がり）'],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【重みの概念を説明】',
            '「重み」というのは、その桁がどれだけの価値を持つかということです。',
            '',
            '例：1011（2進数）の価値',
            '= 1×8 + 0×4 + 1×2 + 1×1',
            '= 8 + 0 + 2 + 1',
            '= 11（10進数）',
            '',
            '【学習者への質問】',
            '「1101は10進数でいくつになるでしょうか？」',
            '→ 答え：1×8 + 1×4 + 0×2 + 1×1 = 13',
          ],
        },
        {
          type: 'heading',
          text: '【実際の組み立て】手順を追って作ろう',
        },
        {
          type: 'rich-text',
          elements: [
            '【作業開始の合図】',
            '「それでは、実際に回路を組み立ててみましょう。焦らず、一つずつ進めていきます。」',
            '',
            '【詳細な手順説明】',
            '',
            '手順1：数Aの入力を配置',
            '• INPUTゲートを4つ、画面の左側に縦に並べる',
            '• 上から順に：A3（8の位）、A2（4の位）、A1（2の位）、A0（1の位）',
            '• 「これで、0〜15の数を入力できます」',
            '',
            '手順2：数Bの入力を配置',
            '• INPUTゲートを4つ、Aの右側に縦に並べる',
            '• 上から順に：B3（8の位）、B2（4の位）、B1（2の位）、B0（1の位）',
            '• 「これで、もう一つの0〜15の数を入力できます」',
            '',
            '手順3：全加算器を配置',
            '• カスタムゲートから全加算器を4つ選ぶ',
            '• 入力の右側に、縦に4つ並べる',
            '• 「各全加算器が、対応する桁の計算を担当します」',
            '',
            '手順4：結果の出力を配置',
            '• OUTPUTゲートを5つ、右端に縦に並べる',
            '• 上から順に：16の位、8の位、4の位、2の位、1の位',
            '• 「5つ必要な理由：結果が16以上になる可能性があるから」',
          ],
        },
        {
          type: 'heading',
          text: '【配線作業】つながりを理解しながら接続',
        },
        {
          type: 'rich-text',
          elements: [
            '【配線の重要性を説明】',
            '「配線は回路の神経系です。正しくつながないと、計算が間違ってしまいます。」',
            '',
            '配線作業1：入力から全加算器へ',
            '• A0とB0を全加算器0につなぐ',
            '• A1とB1を全加算器1につなぐ',
            '• A2とB2を全加算器2につなぐ',
            '• A3とB3を全加算器3につなぐ',
            '「これで、各桁の数が対応する全加算器に送られます」',
            '',
            '配線作業2：繰り上がりの連鎖',
            '• 全加算器0の繰り上がり出力を全加算器1の繰り上がり入力につなぐ',
            '• 全加算器1の繰り上がり出力を全加算器2の繰り上がり入力につなぐ',
            '• 全加算器2の繰り上がり出力を全加算器3の繰り上がり入力につなぐ',
            '• 全加算器3の繰り上がり出力を最上位の出力（16の位）につなぐ',
            '「これで、繰り上がりが順番に伝わる仕組みが完成します」',
            '',
            '配線作業3：計算結果の出力',
            '• 全加算器0の和出力を1の位の出力につなぐ',
            '• 全加算器1の和出力を2の位の出力につなぐ',
            '• 全加算器2の和出力を4の位の出力につなぐ',
            '• 全加算器3の和出力を8の位の出力につなぐ',
            '「これで、各桁の計算結果が表示されます」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】配線作業で学習者が混乱しやすいポイント：1）繰り上がりの方向（下位桁→上位桁）、2）入力と出力の区別。図解や実演で丁寧に説明する。',
        },
      ],
    },
    {
      id: 'experiment',
      instruction: '段階的に実験して動作を確認しよう',
      content: [
        {
          type: 'heading',
          text: '【実験の心構え】科学者のように観察しよう',
        },
        {
          type: 'rich-text',
          elements: [
            '【実験開始の動機付け】',
            '「回路が完成しました！でも、本当に正しく動くでしょうか？」',
            '「科学者のように、予想を立てて、実験で確かめてみましょう。」',
            '',
            '【実験の進め方】',
            '1. まず結果を予想する',
            '2. 実際に入力を設定して実験する',
            '3. 結果を観察して、予想と比較する',
            '4. なぜそうなったのかを考える',
          ],
        },
        {
          type: 'heading',
          text: '【実験1】簡単な計算で基本動作を確認（3 + 5）',
        },
        {
          type: 'rich-text',
          elements: [
            '【予想フェーズ】',
            '「まず、3 + 5を計算してみましょう。答えは8ですね。」',
            '「8を2進数で表すと1000です。つまり、8の位だけが1になるはずです。」',
            '',
            '【設定方法の説明】',
            '数3の設定（0011）：',
            '• A3（8の位）：0をクリック',
            '• A2（4の位）：0をクリック',
            '• A1（2の位）：1をクリック',
            '• A0（1の位）：1をクリック',
            '',
            '数5の設定（0101）：',
            '• B3（8の位）：0をクリック',
            '• B2（4の位）：1をクリック',
            '• B1（2の位）：0をクリック',
            '• B0（1の位）：1をクリック',
          ],
        },
        {
          type: 'table',
          headers: ['桁', '数A', '数B', '予想結果', '確認'],
          rows: [
            ['8の位（上）', '0', '0', '1', '←ここが1になるはず'],
            ['4の位', '0', '1', '0', ''],
            ['2の位', '1', '0', '0', ''],
            ['1の位（下）', '1', '1', '0', ''],
            ['16の位', '-', '-', '0', '繰り上がりなし'],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【観察ポイント】',
            '「設定したら、出力の変化を観察してください。」',
            '「配線の色も見てください。緑色は1（電気が流れている）、グレーは0（電気が流れていない）を表します。」',
            '',
            '【結果の確認】',
            '結果が01000（8）になったら成功です！',
            '「予想通りでしたか？」',
          ],
        },
        {
          type: 'heading',
          text: '【実験2】繰り上がりのある計算（7 + 9）',
        },
        {
          type: 'rich-text',
          elements: [
            '【予想フェーズ】',
            '「今度は、もっと複雑な計算をしてみましょう。7 + 9です。」',
            '「答えは16です。16は4ビットでは表せないので、5ビット目（16の位）が必要になります。」',
            '「結果は10000になるはずです。」',
            '',
            '【重要ポイントの説明】',
            '「この実験では、繰り上がりの連鎖を観察できます。」',
            '「1の位から8の位まで、順番に繰り上がりが伝わる様子を見てください。」',
          ],
        },
        {
          type: 'table',
          headers: ['桁', '数A（7）', '数B（9）', '予想結果', '説明'],
          rows: [
            ['8の位', '0', '1', '0', ''],
            ['4の位', '1', '0', '0', ''],
            ['2の位', '1', '0', '0', ''],
            ['1の位', '1', '1', '0', ''],
            ['16の位', '-', '-', '1', '←ここに注目！'],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【詳細な観察指示】',
            '「入力を設定したら、以下を観察してください：」',
            '1. まず1の位の全加算器が反応する',
            '2. その繰り上がりが2の位の全加算器に伝わる',
            '3. さらに4の位、8の位へと順番に伝わる',
            '4. 最終的に16の位に1が出力される',
            '',
            '【期待される結果】',
            '10000（16）が表示されれば成功！',
          ],
        },
        {
          type: 'heading',
          text: '【実験3】最大値の挑戦（15 + 15）',
        },
        {
          type: 'rich-text',
          elements: [
            '【最終実験の意義】',
            '「最後に、4ビット加算器の限界に挑戦してみましょう。」',
            '「15 + 15 = 30です。これは4ビットでは絶対に表せない数です。」',
            '',
            '【設定方法】',
            '両方の数を1111（15）に設定：',
            '• すべてのAの入力を1にクリック',
            '• すべてのBの入力を1にクリック',
            '',
            '【予想される結果】',
            '30 = 16 + 8 + 4 + 2 = 11110（2進数）',
            '',
            '【学習者への問いかけ】',
            '「どの桁に1が表示されると思いますか？」',
            '→ 答え：16の位、8の位、4の位、2の位',
            '',
            '【観察のポイント】',
            '「この実験では、複数の桁で繰り上がりが同時に発生します。」',
            '「まるでドミノ倒しのように、繰り上がりが連鎖する様子を観察してください。」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】実験中に学習者が混乱したポイントをメモする。特に繰り上がりの流れが理解できているかを確認。必要に応じて、もう一度説明する。',
        },
      ],
    },
    {
      id: 'analysis',
      instruction: '繰り上がりの伝わり方を詳しく見てみよう',
      content: [
        {
          type: 'heading',
          text: '【深い理解】なぜこの回路が美しいのか',
        },
        {
          type: 'rich-text',
          elements: [
            '【分析の導入】',
            '「実験お疲れさまでした！今度は、なぜこの回路がうまく動くのかを詳しく分析してみましょう。」',
            '',
            '【ケーススタディ】15 + 1の計算を追ってみよう',
            '「一番分かりやすい例として、15 + 1（1111 + 0001）の計算を段階ごとに見てみましょう。」',
            '「これは繰り上がりの連鎖が最もよく見える例です。」',
          ],
        },
        {
          type: 'heading',
          text: '【時系列分析】繰り上がりの連鎖反応',
        },
        {
          type: 'table',
          headers: ['時刻', '1の位', '2の位', '4の位', '8の位', '16の位', '状態説明'],
          rows: [
            ['開始', '1+1を開始', '待機中', '待機中', '待機中', '0', '1の位から計算開始'],
            ['1段階後', '和0,繰上1', '1+0+1を開始', '待機中', '待機中', '0', '1の位完了、2の位開始'],
            ['2段階後', '完了', '和0,繰上1', '1+0+1を開始', '待機中', '0', '2の位完了、4の位開始'],
            ['3段階後', '完了', '完了', '和0,繰上1', '1+0+1を開始', '0', '4の位完了、8の位開始'],
            ['4段階後', '完了', '完了', '完了', '和0,繰上1', '1', '8の位完了、16の位に出力'],
            ['完了', '0', '0', '0', '0', '1', '最終結果：10000（16）'],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【分析のポイント】',
            '「この表から分かることは何でしょうか？」',
            '',
            '重要な発見：',
            '1. 計算は順番に行われる（並列ではない）',
            '2. 各段階で1つの桁が処理される',
            '3. 繰り上がりが次の段階のトリガーになる',
            '4. 最悪の場合、4段階の時間が必要',
            '',
            '【学習者への質問】',
            '「もし8ビット加算器を作ったら、最悪何段階かかるでしょうか？」',
            '→ 答え：8段階',
          ],
        },
        {
          type: 'heading',
          text: '【設計の評価】長所と短所を考えよう',
        },
        {
          type: 'rich-text',
          elements: [
            '【客観的な評価】',
            '「この4ビット加算器の設計について、良い点と改善できる点を考えてみましょう。」',
            '',
            '【長所の分析】',
            '• シンプル：同じ全加算器を繰り返し使うだけ',
            '• 確実：どんな入力でも必ず正しい答えが出る',
            '• 理解しやすい：仕組みが目で見て分かる',
            '• 拡張しやすい：8ビット、16ビットにも簡単に応用できる',
            '• 部品が少ない：必要最小限の回路で実現',
            '',
            '【短所の分析】',
            '• 遅い：繰り上がりが順番に伝わるので時間がかかる',
            '• ビット数に比例：32ビットなら最大32段階必要',
            '• 並列処理できない：すべての計算を同時にできない',
            '',
            '【実世界での対応】',
            '「実際のコンピュータでは、この問題をどう解決していると思いますか？」',
            '→ より高速な加算方式（キャリールックアヘッドなど）を使用',
            '→ でも基本原理は同じ',
          ],
        },
        {
          type: 'heading',
          text: '【応用の視点】ビット数と性能の関係',
        },
        {
          type: 'table',
          headers: ['ビット数', '表現可能な範囲', '必要な全加算器', '最大遅延', '用途例'],
          rows: [
            ['4ビット', '0〜31', '4個', '4段階', '簡単な計算、学習用'],
            ['8ビット', '0〜511', '8個', '8段階', '小さな数値、制御用'],
            ['16ビット', '0〜131,071', '16個', '16段階', '音声データ、昔のPC'],
            ['32ビット', '0〜約43億', '32個', '32段階', '現代のPC、スマホ'],
            ['64ビット', '0〜約1844京', '64個', '64段階', '科学計算、サーバー'],
          ],
        },
        {
          type: 'rich-text',
          elements: [
            '【スケールの実感】',
            '「今作った4ビット加算器を64ビットまで拡張すると、宇宙の原子の数まで計算できるようになります！」',
            '「でも基本の仕組みは、今日学んだものと全く同じなのです。」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】学習者が設計の評価について自分なりの意見を持てているかを確認。長所・短所を理解できていれば、次の高度なトピックに進む準備ができている。',
        },
      ],
    },
    {
      id: 'applications',
      instruction: '4ビット加算器が使われている場面',
      content: [
        {
          type: 'heading',
          text: '【身近な応用】私たちの周りの4ビット加算器',
        },
        {
          type: 'rich-text',
          elements: [
            '【現実とのつながり】',
            '「今作った回路は、実は皆さんの身の回りでたくさん使われています。」',
            '「どんな場面で使われているか、一緒に探してみましょう。」',
            '',
            '【ゲームの世界】',
            '「ゲームをするとき、知らず知らずのうちに4ビット加算器を使っています：」',
            '',
            '• スコア計算：10点 + 8点 = 18点（でも表示は0〜30点の範囲）',
            '• アイテム個数：剣3個 + 盾2個 = 持ち物5個',
            '• ダメージ計算：攻撃力12 + 武器ボーナス5 = 総ダメージ17',
            '• 経験値：現在経験値15 + 獲得経験値10 = 合計25',
            '',
            '【学習者への問いかけ】',
            '「皆さんがよくプレイするゲームで、似たような計算はありませんか？」',
          ],
        },
        {
          type: 'heading',
          text: '【日常の電子機器】意外なところにも',
        },
        {
          type: 'rich-text',
          elements: [
            '【家庭の中の4ビット加算器】',
            '',
            '• 電卓：一番身近な例。ボタンを押すたびに加算回路が動く',
            '• デジタル時計：秒数をカウント（59秒 + 1秒 = 0秒、分を繰り上げ）',
            '• 電子レンジ：残り時間の計算（3分 + 30秒 = 3分30秒）',
            '• 体温計：測定値の平均計算',
            '• 歩数計：歩数の累積（1000歩 + 新しい10歩 = 1010歩）',
            '',
            '【学習者の理解を深める質問】',
            '「この中で、実際に使ったことがあるものはありますか？」',
            '「そのとき、中で今日学んだような計算が行われていたんですね。」',
          ],
        },
        {
          type: 'heading',
          text: '【現代のコンピュータ】スケールアップした世界',
        },
        {
          type: 'rich-text',
          elements: [
            '【驚きの事実】',
            '「皆さんが使っているスマートフォンやパソコンも、基本原理は今日学んだものと同じです。」',
            '「ただし、規模が全く違います。」',
            '',
            '【具体的な数字】',
            '現代のコンピュータの例：',
            '• スマートフォン：64ビット加算器（約1800京まで計算可能）',
            '• ゲーム機：GPU内に数千個の加算器が並列動作',
            '• スーパーコンピュータ：数百万個の加算器が同時に計算',
            '',
            '【実用例の説明】',
            '• 銀行：口座残高の計算（1,000,000円 + 50,000円 = 1,050,000円）',
            '• 動画再生：ピクセルの色計算（赤125 + 緑67 + 青200 = 色の合成）',
            '• GPS：位置の計算（緯度・経度の座標計算）',
            '• インターネット：データ量の計算（送信データ + 受信データ）',
            '',
            '【感動を与える表現】',
            '「今日皆さんが作った小さな4ビット加算器が、このような巨大なシステムの基礎になっているのです。」',
          ],
        },
        {
          type: 'heading',
          text: '【未来への展望】これからの技術',
        },
        {
          type: 'rich-text',
          elements: [
            '【技術の進歩】',
            '「加算器の技術は、今も進歩を続けています：」',
            '',
            '• 量子コンピュータ：量子の性質を使った超高速計算',
            '• AI専用チップ：機械学習に特化した加算器',
            '• 省電力設計：スマートウォッチなどの小型機器用',
            '',
            '【学習者へのメッセージ】',
            '「でも、どんなに技術が進歩しても、基本原理は変わりません。」',
            '「今日学んだ知識は、未来の技術を理解する土台になります。」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】学習者が「自分の学習が実世界とつながっている」と実感できているかを確認。具体例を多く出して、抽象的な概念を身近に感じられるようにする。',
        },
      ],
    },
    {
      id: 'summary',
      instruction: '複数桁の計算回路を完成させました',
      content: [
        {
          type: 'heading',
          text: '【振り返り】今日の学習成果を確認しよう',
        },
        {
          type: 'rich-text',
          elements: [
            '【達成感を与える導入】',
            '「お疲れさまでした！今日は本当にすごいことを成し遂げました。」',
            '「皆さんは、本格的なコンピュータの計算回路を作ることができるようになったのです。」',
            '',
            '【学習内容の整理】',
            '今日学んだことを整理してみましょう：',
          ],
        },
        {
          type: 'heading',
          text: '【重要ポイントの再確認】',
        },
        {
          type: 'rich-text',
          elements: [
            '【1つずつ丁寧に振り返る】',
            '',
            '① 4ビットの限界を理解',
            '• 4ビットでは0〜15までしか表現できない',
            '• 15を超える計算には5ビット目が必要',
            '• 現実の問題（ゲーム、買い物など）では15を超える計算が必要',
            '',
            '② 複数桁の計算の仕組みを理解',
            '• 10進数の筆算と2進数の筆算は同じ仕組み',
            '• 繰り上がりが次の桁に自動的に伝わる',
            '• 各桁の計算を全加算器が分担',
            '',
            '③ 実際の回路を設計・構築',
            '• 全加算器を4つつなげる設計',
            '• 入力、計算、出力の配線を正しく接続',
            '• 繰り上がりの連鎖を配線で実現',
            '',
            '④ 実験による検証',
            '• 簡単な計算から複雑な計算まで段階的にテスト',
            '• 予想と結果を比較して理解を深化',
            '• 繰り上がりの連鎖を実際に観察',
          ],
        },
        {
          type: 'heading',
          text: '【理解度の最終確認】',
        },
        {
          type: 'quiz',
          question: '4ビット加算器で「15 + 1」を計算すると、結果はどうなりますか？',
          options: [
            '0000（計算できない）',
            '1111（15のまま変化しない）',
            '10000（16になる）',
            'エラーが発生する',
          ],
          correctIndex: 2,
          explanation: '正解：10000（16になる）。15 + 1 = 16ですが、16は4ビットでは表現できないので、5ビット目（16の位）に1が出力されます。これが4ビット加算器の真の価値です。',
        },
        {
          type: 'heading',
          text: '【学習の価値を再確認】',
        },
        {
          type: 'rich-text',
          elements: [
            '【成長の実感】',
            '「最初は0と1だけの世界でしたが、今では：」',
            '• 複数桁の計算ができる回路を設計できる',
            '• 繰り上がりの仕組みを理解している',
            '• 現実の問題を回路で解決する方法を知っている',
            '• コンピュータの基本原理を体験的に理解している',
            '',
            '【技術者としての第一歩】',
            '「これで皆さんも、本格的な計算回路を作れるエンジニアの仲間入りです。」',
            '「スマートフォンやパソコンがどうやって計算しているか、もう謎ではありませんね。」',
          ],
        },
        {
          type: 'heading',
          text: '【次のステップへの準備】',
        },
        {
          type: 'rich-text',
          elements: [
            '【次回予告で期待感を高める】',
            '「次回は',
            { text: '比較器', bold: true },
            'を学びます。」',
            '',
            '「2つの数を比べて「どちらが大きいか」を判定する回路です。」',
            '「ゲームのランキング、テストの成績順、商品の価格比較など、',
            '「どちらが大きいか」を判断する場面は日常にあふれています。」',
            '',
            '「今日学んだ加算の技術と組み合わせることで、',
            'さらに高度な計算ができるようになります。」',
            '',
            '【最終的な励まし】',
            '「今日は本当にお疲れさまでした。」',
            '「難しい内容でしたが、皆さんは見事にマスターしました。」',
            '「次回も一緒に、コンピュータの世界を探検していきましょう！」',
          ],
        },
        {
          type: 'note',
          text: '【指導者向けメモ】学習者が達成感を感じているかを確認。不明な点があれば、次回の開始時に復習する。学習者の理解度に応じて、次回のレッスンの進め方を調整する準備をする。',
        },
      ],
    },
  ],
};