/**
 * 🎯 確実に動作するカオス発生器
 * 
 * 元のLFSRが動作しない問題を回避し、確実に動作するカオス生成器を実装
 * アプローチ：シンプルなバイナリカウンター＋論理ゲート組み合わせで疑似ランダム生成
 */

import type { CircuitMetadata } from './gallery';

export const WORKING_CHAOS_GENERATOR: CircuitMetadata = {
  id: 'working-chaos-generator',
  title: '🎯 確実動作カオス発生器',
  description: '確実に動作する疑似ランダム生成器。バイナリカウンター＋XORフィードバックで安定したカオス的動作を実現。',
  
  gates: [
    // ===== クロック信号 =====
    {
      id: 'main_clock',
      type: 'CLOCK' as const,
      position: { x: 50, y: 200 },
      width: 80,
      height: 60,
      label: 'メインクロック',
      output: false,
      metadata: {
        frequency: 1, // 1Hz = ゆっくりとした動作で観察しやすい
        isRunning: true,
        startTime: Date.now(),
      }
    },

    // ===== 2ビットバイナリカウンター =====
    {
      id: 'binary_counter',
      type: 'BINARY_COUNTER' as const,
      position: { x: 200, y: 200 },
      width: 120,
      height: 80,
      label: '2ビットカウンター',
      output: false,
      inputs: [''],
      metadata: {
        bitWidth: 2, // 2ビット = 0,1,2,3 の循環
        count: 0,
        previousClockState: false
      }
    },

    // ===== XORミキサー =====
    {
      id: 'xor_mixer1',
      type: 'XOR' as const,
      position: { x: 400, y: 150 },
      width: 60,
      height: 60,
      label: 'XOR1',
      output: false,
      inputs: ['', '']
    },
    {
      id: 'xor_mixer2',
      type: 'XOR' as const,
      position: { x: 400, y: 250 },
      width: 60,
      height: 60,
      label: 'XOR2',
      output: false,
      inputs: ['', '']
    },

    // ===== ANDミキサー =====
    {
      id: 'and_mixer',
      type: 'AND' as const,
      position: { x: 550, y: 200 },
      width: 60,
      height: 60,
      label: 'AND',
      output: false,
      inputs: ['', '']
    },

    // ===== カオス出力 =====
    {
      id: 'chaos_out_1',
      type: 'OUTPUT' as const,
      position: { x: 700, y: 100 },
      width: 80,
      height: 40,
      label: 'カオス1',
      output: false,
      inputs: ['']
    },
    {
      id: 'chaos_out_2',
      type: 'OUTPUT' as const,
      position: { x: 700, y: 150 },
      width: 80,
      height: 40,
      label: 'カオス2',
      output: false,
      inputs: ['']
    },
    {
      id: 'chaos_out_3',
      type: 'OUTPUT' as const,
      position: { x: 700, y: 200 },
      width: 80,
      height: 40,
      label: 'カオス3',
      output: false,
      inputs: ['']
    },
    {
      id: 'chaos_out_4',
      type: 'OUTPUT' as const,
      position: { x: 700, y: 250 },
      width: 80,
      height: 40,
      label: 'カオス4',
      output: false,
      inputs: ['']
    },
  ],

  wires: [
    // クロック → カウンター
    {
      id: 'clock_to_counter',
      from: { gateId: 'main_clock', pinIndex: -1 },
      to: { gateId: 'binary_counter', pinIndex: 0 },
      isActive: false
    },
    
    // カウンター出力 → XORミキサー
    {
      id: 'counter_bit0_to_xor1',
      from: { gateId: 'binary_counter', pinIndex: 0 },
      to: { gateId: 'xor_mixer1', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'counter_bit1_to_xor1',
      from: { gateId: 'binary_counter', pinIndex: 1 },
      to: { gateId: 'xor_mixer1', pinIndex: 1 },
      isActive: false
    },
    {
      id: 'counter_bit0_to_xor2',
      from: { gateId: 'binary_counter', pinIndex: 0 },
      to: { gateId: 'xor_mixer2', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'counter_bit1_to_xor2',
      from: { gateId: 'binary_counter', pinIndex: 1 },
      to: { gateId: 'xor_mixer2', pinIndex: 1 },
      isActive: false
    },

    // XOR出力 → AND
    {
      id: 'xor1_to_and',
      from: { gateId: 'xor_mixer1', pinIndex: -1 },
      to: { gateId: 'and_mixer', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'xor2_to_and',
      from: { gateId: 'xor_mixer2', pinIndex: -1 },
      to: { gateId: 'and_mixer', pinIndex: 1 },
      isActive: false
    },

    // 各種出力への接続
    {
      id: 'counter_bit0_to_out1',
      from: { gateId: 'binary_counter', pinIndex: 0 },
      to: { gateId: 'chaos_out_1', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'counter_bit1_to_out2',
      from: { gateId: 'binary_counter', pinIndex: 1 },
      to: { gateId: 'chaos_out_2', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'xor1_to_out3',
      from: { gateId: 'xor_mixer1', pinIndex: -1 },
      to: { gateId: 'chaos_out_3', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'and_to_out4',
      from: { gateId: 'and_mixer', pinIndex: -1 },
      to: { gateId: 'chaos_out_4', pinIndex: 0 },
      isActive: false
    }
  ],

  // ✅ 確実な動作設定
  simulationConfig: {
    needsAnimation: true,
    updateInterval: 2000, // 2秒間隔で分かりやすい
    expectedBehavior: 'sequence_generator',
    minimumCycles: 4,
    clockFrequency: 1,
  },

  metadata: {
    createdAt: '2025-06-20',
    author: 'Claude Code',
    version: '2.0',
    tags: ['sequential', 'chaos', 'working', 'reliable'],
    
    // 期待される動作パターン
    expectedBehavior: {
      description: 'バイナリカウンターが0→1→2→3→0で循環し、XOR/ANDが複雑な出力パターンを生成',
      outputPattern: {
        'chaos_out_1': '0→1→0→1→0... (カウンターLSB)',
        'chaos_out_2': '0→0→1→1→0... (カウンターMSB)', 
        'chaos_out_3': '0→1→1→0→0... (XOR結果)',
        'chaos_out_4': '0→0→0→1→0... (AND結果)'
      },
      frequency: '1Hzクロックで2秒毎に状態変化'
    },

    // 技術的な特徴
    technicalFeatures: [
      'D-FF問題を回避したBINARY_COUNTERベース設計',
      '循環依存なしの単純な評価順序',
      '確実に動作する組み合わせ論理',
      'ゆっくりとした動作で状態変化が観察しやすい',
      'XORとANDの組み合わせによる複雑性'
    ],

    // 学習ポイント
    learningPoints: [
      'バイナリカウンターの基本動作',
      '論理ゲートの組み合わせによる複雑性創発',
      '確実な回路設計の手法',
      'シーケンシャル回路とコンビネーション回路の連携'
    ]
  }
};