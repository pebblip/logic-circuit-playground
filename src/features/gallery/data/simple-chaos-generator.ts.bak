/**
 * 🎯 シンプルカオス発生器
 * 
 * D-FF二段階評価に依存しない、確実に動作するカオス発生器の実装
 * アプローチ：バイナリカウンター + XOR フィードバックの組み合わせ
 */

import type { CircuitMetadata } from './gallery';

export const SIMPLE_CHAOS_GENERATOR: CircuitMetadata = {
  id: 'simple-chaos-generator',
  title: '🎯 確実動作カオス発生器',
  description: 'D-FF二段階評価に依存しないシンプルな擬似ランダム生成器。バイナリカウンター+フィードバックで確実に動作します。',
  
  gates: [
    // ===== クロック信号 =====
    {
      id: 'clock',
      type: 'CLOCK' as const,
      position: { x: 50, y: 150 },
      width: 60,
      height: 40,
      label: 'CLK',
      output: false,
      metadata: {
        frequency: 2, // 2Hz = ゆっくりとした動作で観察しやすい
        isRunning: true,
      }
    },

    // ===== 2ビットバイナリカウンター =====
    {
      id: 'counter',
      type: 'BINARY_COUNTER' as const,
      position: { x: 200, y: 150 },
      width: 100,
      height: 60,
      label: 'カウンター',
      output: false,
      inputs: [''],
      metadata: {
        bitWidth: 2, // 2ビット = 0,1,2,3 の循環
        count: 0,
        previousClockState: false
      }
    },

    // ===== フィードバック用XOR =====
    {
      id: 'feedback_xor',
      type: 'XOR' as const,
      position: { x: 350, y: 100 },
      width: 60,
      height: 60,
      label: 'XOR',
      output: false,
      inputs: ['', '']
    },

    // ===== カオス出力ビット =====
    {
      id: 'chaos_bit0',
      type: 'OUTPUT' as const,
      position: { x: 500, y: 50 },
      width: 60,
      height: 40,
      label: 'カオス0',
      output: false,
      inputs: ['']
    },
    {
      id: 'chaos_bit1', 
      type: 'OUTPUT' as const,
      position: { x: 500, y: 100 },
      width: 60,
      height: 40,
      label: 'カオス1',
      output: false,
      inputs: ['']
    },
    {
      id: 'chaos_bit2',
      type: 'OUTPUT' as const,
      position: { x: 500, y: 150 },
      width: 60,
      height: 40,
      label: 'カオス2',
      output: false,
      inputs: ['']
    },
    {
      id: 'chaos_bit3',
      type: 'OUTPUT' as const,
      position: { x: 500, y: 200 },
      width: 60,
      height: 40,
      label: 'カオス3',
      output: false,
      inputs: ['']
    },

    // ===== 追加ロジックゲート（カオス性を高める）=====
    {
      id: 'mix_and1',
      type: 'AND' as const,
      position: { x: 350, y: 50 },
      width: 60,
      height: 60,
      label: 'AND',
      output: false,
      inputs: ['', '']
    },
    {
      id: 'mix_or1',
      type: 'OR' as const,
      position: { x: 350, y: 200 },
      width: 60,
      height: 60,
      label: 'OR',  
      output: false,
      inputs: ['', '']
    }
  ],

  wires: [
    // クロック → カウンター
    {
      id: 'clk_counter',
      from: { gateId: 'clock', pinIndex: -1 },
      to: { gateId: 'counter', pinIndex: 0 },
      isActive: false
    },
    
    // カウンター出力（ビット0,1）→ フィードバックXOR
    {
      id: 'counter_b0_xor',
      from: { gateId: 'counter', pinIndex: 0 },
      to: { gateId: 'feedback_xor', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'counter_b1_xor',
      from: { gateId: 'counter', pinIndex: 1 },
      to: { gateId: 'feedback_xor', pinIndex: 1 },
      isActive: false
    },

    // カウンター出力 → 追加ロジック（カオス性向上）
    {
      id: 'counter_b0_and',
      from: { gateId: 'counter', pinIndex: 0 },
      to: { gateId: 'mix_and1', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'counter_b1_and',
      from: { gateId: 'counter', pinIndex: 1 },
      to: { gateId: 'mix_and1', pinIndex: 1 },
      isActive: false
    },
    {
      id: 'counter_b0_or',
      from: { gateId: 'counter', pinIndex: 0 },
      to: { gateId: 'mix_or1', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'xor_out_or',
      from: { gateId: 'feedback_xor', pinIndex: -1 },
      to: { gateId: 'mix_or1', pinIndex: 1 },
      isActive: false
    },

    // 各種出力への接続
    {
      id: 'out_chaos0',
      from: { gateId: 'counter', pinIndex: 0 }, // カウンターのビット0
      to: { gateId: 'chaos_bit0', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'out_chaos1',
      from: { gateId: 'counter', pinIndex: 1 }, // カウンターのビット1
      to: { gateId: 'chaos_bit1', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'out_chaos2',
      from: { gateId: 'mix_and1', pinIndex: -1 }, // AND出力
      to: { gateId: 'chaos_bit2', pinIndex: 0 },
      isActive: false
    },
    {
      id: 'out_chaos3',
      from: { gateId: 'feedback_xor', pinIndex: -1 }, // XOR出力
      to: { gateId: 'chaos_bit3', pinIndex: 0 },
      isActive: false
    }
  ],

  metadata: {
    createdAt: '2025-06-20',
    author: 'Claude Code',
    version: '1.0',
    tags: ['sequential', 'chaos', 'reliable', 'simple'],
    
    // 期待される動作パターン
    expectedBehavior: {
      description: 'バイナリカウンターが0→1→2→3→0のサイクルを繰り返し、各種論理ゲートがこれを変換してカオス的な出力を生成',
      outputPattern: {
        'chaos_bit0': '0→1→0→1→0... (カウンターLSB)',
        'chaos_bit1': '0→0→1→1→0... (カウンターMSB)', 
        'chaos_bit2': '0→0→0→1→0... (AND結果)',
        'chaos_bit3': '0→1→1→0→0... (XOR結果)'
      },
      frequency: '2Hzクロックで500ms毎に状態変化'
    },

    // 技術的な特徴
    technicalFeatures: [
      'D-FF二段階評価に依存しない設計',
      'BINARY_COUNTERによる確実な状態遷移',
      '循環依存なしの単純な評価順序',
      'XORフィードバックによる擬似ランダム性',
      '観察しやすい低周波数（2Hz）動作'
    ],

    // 学習ポイント
    learningPoints: [
      'バイナリカウンターの基本動作',
      '論理ゲートの組み合わせによる複雑性創発',
      'フィードバックループによる擬似ランダム生成',
      '確実な回路設計の重要性'
    ]
  }
};