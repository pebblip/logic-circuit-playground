import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { PuzzleModeManager } from '../PuzzleModeManager';
import { vi, describe, it, beforeEach, expect } from 'vitest';

describe('PuzzleModeManager', () => {
  const mockOnLoadCircuit = vi.fn();

  beforeEach(() => {
    mockOnLoadCircuit.mockClear();
  });

  it('„Éë„Ç∫„É´‰∏ÄË¶ß„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
      />
    );

    expect(screen.getByText('üß© „Éë„Ç∫„É´„É¢„Éº„Éâ')).toBeInTheDocument();
    expect(screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ')).toBeInTheDocument();
    expect(screen.getByText('ÂçäÂä†ÁÆóÂô®')).toBeInTheDocument();
    expect(screen.getByText('SR„É©„ÉÉ„ÉÅ')).toBeInTheDocument();
  });

  it('„Éë„Ç∫„É´„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®Ë©≥Á¥∞„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
      />
    );

    const xorPuzzle = screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ');
    fireEvent.click(xorPuzzle);

    expect(screen.getByText('‚Üê „Éë„Ç∫„É´‰∏ÄË¶ß„Å´Êàª„Çã')).toBeInTheDocument();
    expect(screen.getByText('ÁõÆÊ®ô:')).toBeInTheDocument();
    expect(screen.getByText('„Éí„É≥„Éà„ÇíË¶ã„Çã')).toBeInTheDocument();
    expect(screen.getByText('Á≠î„Åà„ÇíÁ¢∫Ë™ç')).toBeInTheDocument();
  });

  it('„Éë„Ç∫„É´ÈÅ∏ÊäûÊôÇ„Å´ÂõûË∑Ø„Åå„ÇØ„É™„Ç¢„Åï„Çå„Çã', () => {
    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
      />
    );

    const xorPuzzle = screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ');
    fireEvent.click(xorPuzzle);

    expect(mockOnLoadCircuit).toHaveBeenCalledWith({ gates: [], connections: [] });
  });

  it('„Éí„É≥„Éà„Éú„Çø„É≥„ÅßÈ†ÜÁï™„Å´„Éí„É≥„Éà„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
      />
    );

    fireEvent.click(screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ'));
    
    // ÊúÄÂàù„ÅÆ„Éí„É≥„Éà
    fireEvent.click(screen.getByText('„Éí„É≥„Éà„ÇíË¶ã„Çã'));
    expect(screen.getByText(/XOR„ÅØ„ÄåÊéí‰ªñÁöÑË´ñÁêÜÂíå„Äç„Åß„Åô/)).toBeInTheDocument();

    // Ê¨°„ÅÆ„Éí„É≥„Éà
    fireEvent.click(screen.getByText('Ê¨°„ÅÆ„Éí„É≥„Éà'));
    expect(screen.getByText(/ÂÖ•Âäõ„ÅåÁï∞„Å™„Çã„Å®„Åç„Å†„ÅëÂá∫Âäõ„Åå1„Å´„Å™„Çä„Åæ„Åô/)).toBeInTheDocument();

    // 3Áï™ÁõÆ„ÅÆ„Éí„É≥„Éà
    fireEvent.click(screen.getByText('Ê¨°„ÅÆ„Éí„É≥„Éà'));
    expect(screen.getByText(/AND, OR, NOT„Ç≤„Éº„Éà„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶‰Ωú„Çå„Åæ„Åô/)).toBeInTheDocument();
  });

  it('ÈÄ≤ÊçóÁä∂Ê≥Å„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
      />
    );

    expect(screen.getByText('ÂÆå‰∫Ü: 0 / 3')).toBeInTheDocument();
  });

  it('‰∏çÊ≠£Ëß£„ÅÆÂõûË∑Ø„ÅßÁ≠î„Åà„ÇíÁ¢∫Ë™ç„Åô„Çã„Å®„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    const mockAlert = vi.fn();
    global.alert = mockAlert;

    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
        gates={[]}
        connections={[]}
      />
    );

    fireEvent.click(screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ'));
    fireEvent.click(screen.getByText('Á≠î„Åà„ÇíÁ¢∫Ë™ç'));

    expect(mockAlert).toHaveBeenCalledWith('„Åæ„Å†Ê≠£Ëß£„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë©¶„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
  });

  it('Ê≠£Ëß£„ÅÆÂõûË∑Ø„ÅßÁ≠î„Åà„ÇíÁ¢∫Ë™ç„Åô„Çã„Å®ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
    const mockAlert = vi.fn();
    global.alert = mockAlert;

    // Ê≠£„Åó„ÅÑXORÂõûË∑Ø„ÅÆ„Ç≤„Éº„Éà„Å®Êé•Á∂ö
    const correctGates = [
      { id: 'input1', type: 'INPUT', x: 100, y: 100 },
      { id: 'input2', type: 'INPUT', x: 100, y: 200 },
      { id: 'and1', type: 'AND', x: 200, y: 120 },
      { id: 'and2', type: 'AND', x: 200, y: 180 },
      { id: 'not1', type: 'NOT', x: 150, y: 120 },
      { id: 'not2', type: 'NOT', x: 150, y: 180 },
      { id: 'or1', type: 'OR', x: 300, y: 150 },
      { id: 'output1', type: 'OUTPUT', x: 400, y: 150 }
    ];

    const correctConnections = [
      { id: 'c1', from: 'input1', fromOutput: 0, to: 'not2', toInput: 0 },
      { id: 'c2', from: 'input2', fromOutput: 0, to: 'not1', toInput: 0 },
      { id: 'c3', from: 'input1', fromOutput: 0, to: 'and1', toInput: 0 },
      { id: 'c4', from: 'not1', fromOutput: 0, to: 'and1', toInput: 1 },
      { id: 'c5', from: 'not2', fromOutput: 0, to: 'and2', toInput: 0 },
      { id: 'c6', from: 'input2', fromOutput: 0, to: 'and2', toInput: 1 },
      { id: 'c7', from: 'and1', fromOutput: 0, to: 'or1', toInput: 0 },
      { id: 'c8', from: 'and2', fromOutput: 0, to: 'or1', toInput: 1 },
      { id: 'c9', from: 'or1', fromOutput: 0, to: 'output1', toInput: 0 }
    ];

    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
        gates={correctGates}
        connections={correctConnections}
      />
    );

    fireEvent.click(screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ'));
    fireEvent.click(screen.getByText('Á≠î„Åà„ÇíÁ¢∫Ë™ç'));

    expect(mockAlert).toHaveBeenCalledWith('Ê≠£Ëß£„Åß„ÅôÔºÅ„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅüéâ');
  });

  it('Êàª„Çã„Éú„Çø„É≥„Åß„Éë„Ç∫„É´‰∏ÄË¶ß„Å´Êàª„Çã', () => {
    render(
      <PuzzleModeManager
        currentMode="puzzle"
        onLoadCircuit={mockOnLoadCircuit}
      />
    );

    fireEvent.click(screen.getByText('XOR„Ç≤„Éº„Éà„Çí‰Ωú„Çç„ÅÜ'));
    expect(screen.queryByText('„Éë„Ç∫„É´‰∏ÄË¶ß')).not.toBeInTheDocument();

    fireEvent.click(screen.getByText('‚Üê „Éë„Ç∫„É´‰∏ÄË¶ß„Å´Êàª„Çã'));
    expect(screen.getByText('„Éë„Ç∫„É´‰∏ÄË¶ß')).toBeInTheDocument();
  });
});